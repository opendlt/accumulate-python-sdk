[build-system]
requires = ["setuptools>=68", "wheel", "build"]
build-backend = "setuptools.build_meta"

[project]
name = "accumulate-client"
dynamic = ["version", "readme"]
description = "Accumulate Python SDK (V2/V3 unified) with DevNet-first flows"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "OpenDLT", email = "dev@opendlt.dev" }
]
keywords = ["blockchain", "accumulate", "jsonrpc", "client", "devnet", "crypto"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Financial",
    "Topic :: Security :: Cryptography",
]
dependencies = [
    "requests>=2.32",
    "cryptography>=42",
    "pydantic>=2.0.0",
    "typing-extensions>=4.8; python_version<'3.11'",
    "aiohttp>=3.8.0",
    "ecdsa>=0.18.0",
    "websockets>=11.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest", "coverage", "mypy", "ruff", "pdoc", "build", "twine", "genbadge[coverage]", "psutil", "pytest-asyncio>=0.23", "websockets>=11.0.0", "ecdsa>=0.18.0", "coincurve>=21.0.0"
]
secp256k1 = [
    "ecdsa>=0.18.0", "coincurve>=21.0.0"
]

[project.urls]
Homepage = "https://github.com/opendlt/accumulate-python"
Documentation = "https://github.com/opendlt/accumulate-python#readme"
Issues = "https://github.com/opendlt/accumulate-python/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = { attr = "accumulate_client._version.__version__" }
readme = { file = "README.md", content-type = "text/markdown" }

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
preview = true
extend-select = ["I", "UP", "B", "C4", "SIM", "RUF"]
extend-ignore = ["E203"]

[tool.mypy]
python_version = "3.9"
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
strict_optional = true
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-ra"
asyncio_mode = "auto"

markers = [
  "unit: fast, local unit tests",
  "metrics: tests that assert metrics/telemetry surfaces",
  "recovery: circuit-breaker / retry / recovery behavior",
  "streaming: websocket streaming behavior",
  "performance: perf/batching/pooling behavior (can use small bounds)",
  "integration: devnet/live RPC integration tests",
  "conformance: golden vector & parity tests",
  "fuzz: fuzz-based roundtrips"
]

[tool.coverage.run]
source = ["src/accumulate_client"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod"
]
show_missing = true

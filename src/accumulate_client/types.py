# GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

"""Type definitions for Accumulate API"""

import base64
from datetime import datetime
from enum import Enum
from typing import Optional, List, Dict, Any, Union
from dataclasses import dataclass, field





@dataclass
class Url:
    """Url type definition"""


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Url':
        """Create instance from dictionary"""
        kwargs = {}

        return cls(**kwargs)

    def to_dict(self) -> Dict[str, Any]:
        """Convert instance to dictionary"""
        result = {}

        return result

    def __str__(self) -> str:
        return f"Url({', '.join(f'{k}={v}' for k, v in self.to_dict().items())})"


@dataclass
class Bigint:
    """BigInt type definition"""


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Bigint':
        """Create instance from dictionary"""
        kwargs = {}

        return cls(**kwargs)

    def to_dict(self) -> Dict[str, Any]:
        """Convert instance to dictionary"""
        result = {}

        return result

    def __str__(self) -> str:
        return f"Bigint({', '.join(f'{k}={v}' for k, v in self.to_dict().items())})"


@dataclass
class Hash:
    """Hash type definition"""


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Hash':
        """Create instance from dictionary"""
        kwargs = {}

        return cls(**kwargs)

    def to_dict(self) -> Dict[str, Any]:
        """Convert instance to dictionary"""
        result = {}

        return result

    def __str__(self) -> str:
        return f"Hash({', '.join(f'{k}={v}' for k, v in self.to_dict().items())})"


@dataclass
class Chainid:
    """ChainId type definition"""


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Chainid':
        """Create instance from dictionary"""
        kwargs = {}

        return cls(**kwargs)

    def to_dict(self) -> Dict[str, Any]:
        """Convert instance to dictionary"""
        result = {}

        return result

    def __str__(self) -> str:
        return f"Chainid({', '.join(f'{k}={v}' for k, v in self.to_dict().items())})"


@dataclass
class Duration:
    """Duration type definition"""


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Duration':
        """Create instance from dictionary"""
        kwargs = {}

        return cls(**kwargs)

    def to_dict(self) -> Dict[str, Any]:
        """Convert instance to dictionary"""
        result = {}

        return result

    def __str__(self) -> str:
        return f"Duration({', '.join(f'{k}={v}' for k, v in self.to_dict().items())})"


@dataclass
class Timestamp:
    """Timestamp type definition"""


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Timestamp':
        """Create instance from dictionary"""
        kwargs = {}

        return cls(**kwargs)

    def to_dict(self) -> Dict[str, Any]:
        """Convert instance to dictionary"""
        result = {}

        return result

    def __str__(self) -> str:
        return f"Timestamp({', '.join(f'{k}={v}' for k, v in self.to_dict().items())})"


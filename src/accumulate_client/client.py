# GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

"""Accumulate JSON-RPC API client for """

import asyncio
from typing import Optional, Dict, Any

from .json_rpc_client import JsonRpcClient, JsonRpcException
from .types import *


class AccumulateClient:
    """Accumulate JSON-RPC API client"""

    def __init__(self, server_url: str, *, timeout: Optional[float] = None):
        """Initialize the client

        Args:
            server_url: The Accumulate node JSON-RPC endpoint URL
            timeout: Request timeout in seconds (default: 30)
        """
        self._client = JsonRpcClient(server_url, timeout=timeout)

    async def close(self) -> None:
        """Close the underlying HTTP client"""
        await self._client.close()

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()


    async def describe(self) -> DescriptionResponse:
        """queries the basic configuration of the node"""
        result = await self._client.call('describe', None)
        return DescriptionResponse.from_dict(result)



    async def execute(self, request: TxRequest) -> TxResponse:
        """submits a transaction"""
        result = await self._client.call('execute', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_add_credits(self, request: AddCredits) -> :
        """submits an AddCredits transaction"""
        result = await self._client.call('add-credits', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_burn_tokens(self, request: BurnTokens) -> :
        """submits a BurnTokens transaction"""
        result = await self._client.call('burn-tokens', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_adi(self, request: CreateIdentity) -> :
        """submits a CreateIdentity transaction"""
        result = await self._client.call('create-adi', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_data_account(self, request: CreateDataAccount) -> :
        """submits a CreateDataAccount transaction"""
        result = await self._client.call('create-data-account', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_identity(self, request: CreateIdentity) -> :
        """submits a CreateIdentity transaction"""
        result = await self._client.call('create-identity', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_key_book(self, request: CreateKeyBook) -> :
        """submits a CreateKeyBook transaction"""
        result = await self._client.call('create-key-book', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_key_page(self, request: CreateKeyPage) -> :
        """submits a CreateKeyPage transaction"""
        result = await self._client.call('create-key-page', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_token(self, request: CreateToken) -> :
        """submits a CreateToken transaction"""
        result = await self._client.call('create-token', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_create_token_account(self, request: CreateTokenAccount) -> :
        """submits a CreateTokenAccount transaction"""
        result = await self._client.call('create-token-account', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_direct(self, request: ExecuteRequest) -> TxResponse:
        """submits a transaction"""
        result = await self._client.call('execute-direct', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_issue_tokens(self, request: IssueTokens) -> :
        """submits an IssueTokens transaction"""
        result = await self._client.call('issue-tokens', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_local(self, request: ExecuteRequest) -> TxResponse:
        """submits a transaction without routing it. INTENDED FOR INTERNAL USE ONLY"""
        result = await self._client.call('execute-local', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_send_tokens(self, request: SendTokens) -> :
        """submits a SendTokens transaction"""
        result = await self._client.call('send-tokens', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_update_account_auth(self, request: UpdateAccountAuth) -> :
        """submits an UpdateAccountAuth transaction"""
        result = await self._client.call('update-account-auth', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_update_key(self, request: UpdateKey) -> :
        """submits an UpdateKey transaction"""
        result = await self._client.call('update-key', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_update_key_page(self, request: UpdateKeyPage) -> :
        """submits an UpdateKeyPage transaction"""
        result = await self._client.call('update-key-page', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_write_data(self, request: WriteData) -> :
        """submits a WriteData transaction"""
        result = await self._client.call('write-data', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def execute_write_data_to(self, request: WriteDataTo) -> :
        """submits a WriteDataTo transaction"""
        result = await self._client.call('write-data-to', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def faucet(self, request: protocol.AcmeFaucet) -> TxResponse:
        """requests tokens from the ACME faucet"""
        result = await self._client.call('faucet', request.to_dict() if request else None)
        return TxResponse.from_dict(result)



    async def metrics(self, request: MetricsQuery) -> ChainQueryResponse:
        """queries network metrics, such as transactions per second"""
        result = await self._client.call('metrics', request.to_dict() if request else None)
        return ChainQueryResponse.from_dict(result)



    async def query(self, request: GeneralQuery) -> ChainQueryResponse|TransactionQueryResponse|MultiResponse:
        """queries an account or account chain by URL"""
        result = await self._client.call('query', request.to_dict() if request else None)
        return ChainQueryResponse|TransactionQueryResponse|MultiResponse.from_dict(result)



    async def query_data(self, request: DataEntryQuery) -> ChainQueryResponse:
        """queries an entry on an account's data chain"""
        result = await self._client.call('query-data', request.to_dict() if request else None)
        return ChainQueryResponse.from_dict(result)



    async def query_data_set(self, request: DataEntrySetQuery) -> MultiResponse:
        """queries a range of entries on an account's data chain"""
        result = await self._client.call('query-data-set', request.to_dict() if request else None)
        return MultiResponse.from_dict(result)



    async def query_directory(self, request: DirectoryQuery) -> MultiResponse:
        """queries the directory entries of an account"""
        result = await self._client.call('query-directory', request.to_dict() if request else None)
        return MultiResponse.from_dict(result)



    async def query_key_page_index(self, request: KeyPageIndexQuery) -> ChainQueryResponse:
        """queries the location of a key within an account's key book(s)"""
        result = await self._client.call('query-key-index', request.to_dict() if request else None)
        return ChainQueryResponse.from_dict(result)



    async def query_major_blocks(self, request: MajorBlocksQuery) -> MultiResponse:
        """queries an account's major blocks"""
        result = await self._client.call('query-major-blocks', request.to_dict() if request else None)
        return MultiResponse.from_dict(result)



    async def query_minor_blocks(self, request: MinorBlocksQuery) -> MultiResponse:
        """queries an account's minor blocks"""
        result = await self._client.call('query-minor-blocks', request.to_dict() if request else None)
        return MultiResponse.from_dict(result)



    async def query_synth(self, request: SyntheticTransactionRequest) -> TransactionQueryResponse:
        result = await self._client.call('query-synth', request.to_dict() if request else None)
        return TransactionQueryResponse.from_dict(result)



    async def query_tx(self, request: TxnQuery) -> TransactionQueryResponse:
        """queries a transaction by ID"""
        result = await self._client.call('query-tx', request.to_dict() if request else None)
        return TransactionQueryResponse.from_dict(result)



    async def query_tx_history(self, request: TxHistoryQuery) -> MultiResponse:
        """queries an account's transaction history"""
        result = await self._client.call('query-tx-history', request.to_dict() if request else None)
        return MultiResponse.from_dict(result)



    async def query_tx_local(self, request: TxnQuery) -> TransactionQueryResponse:
        """queries a transaction by ID"""
        result = await self._client.call('query-tx-local', request.to_dict() if request else None)
        return TransactionQueryResponse.from_dict(result)



    async def status(self) -> StatusResponse:
        """queries the status of the node"""
        result = await self._client.call('status', None)
        return StatusResponse.from_dict(result)



    async def version(self) -> ChainQueryResponse:
        """queries the software version of the node"""
        result = await self._client.call('version', None)
        return ChainQueryResponse.from_dict(result)



    async def execute(self, request: SubmitRequest) -> SubmitResponse:
        """Execute a transaction directly"""
        result = await self._client.call('execute', request.to_dict() if request else None)
        return SubmitResponse.from_dict(result)



    async def query(self, request: api.Query) -> api.Record:
        result = await self._client.call('', request.to_dict() if request else None)
        return api.Record.from_dict(result)



    async def query_block(self, request: BlockQuery) -> BlockResponse:
        """Query block information"""
        result = await self._client.call('query-block', request.to_dict() if request else None)
        return BlockResponse.from_dict(result)



    async def query_chain(self, request: ChainQuery) -> ChainResponse:
        """Query chain entries"""
        result = await self._client.call('query-chain', request.to_dict() if request else None)
        return ChainResponse.from_dict(result)



    async def submit(self, request: SubmitRequest) -> SubmitResponse:
        """Submit a transaction"""
        result = await self._client.call('submit', request.to_dict() if request else None)
        return SubmitResponse.from_dict(result)



    async def submit_multi(self, request: SubmitRequest) -> SubmitResponse:
        """Submit multiple transactions"""
        result = await self._client.call('submit-multi', request.to_dict() if request else None)
        return SubmitResponse.from_dict(result)



    async def query(self) -> :
        result = await self._client.call('query', None)
        return .from_dict(result)


